[{"title":"","date":"2017-04-02T00:46:45.596Z","path":"2017/04/02/Springboot学习分享文档（转载）/","text":"SpringBoot ѧϰ�����ĵ���ת�أ� SpringBoot���� Spring Boot����Pivotal�Ŷ��ṩ��ȫ�¿��ܣ�������Ŀ��������������SpringӦ�õĳ�ʼ��Լ��������̡��ÿ���ʹ�����ض��ķ�ʽ���������ã��Ӷ�ʹ������Ա������Ҫ�������廯�����á�ͨ�����ַ�ʽ��Spring Boot�����������չ�Ŀ���Ӧ�ÿ���������rapid application development����Ϊ�쵼�ߡ�����������spirngboot������http://projects.spring.io/spring-boot/ SpringBoot�ص� ��ѭ��ϰ���������á���ԭ����ʹ��Spring Bootֻ��Ҫ���ٵ����ã��󲿷ֵ�ʱ������ֱ��ʹ��Ĭ�ϵ����ü��ɣ� ��Ŀ���ٴ�������������õ��Զ����ϵ������Ŀ��ܣ� ������ȫ��ʹ��XML�����ļ���ֻ��Ҫ�Զ����ú�Java Config�� ��ǶServlet�����������˶Ի�����Ҫ�󣬿���ʹ������ֱ��ִ����Ŀ��Ӧ�ÿ���jar��ִ�У�java -jar�� �ṩ��starter POM, �ܹ��ǳ������Ľ��а�����, �ܴ��̶��ϼ�����jar hell����dependency hell�� ������Ӧ��״̬�ļ��أ� ���Ƽ�������Ȼ�̳У� SpringBoot�ŵ� SpringBoot�ǰ�����Spring4.0�����ģ�һ���Ƴ��������˾޴��ķ��� ���������⣬Boot����������˼������SpringBoot���������߿��ٴSpring���ܣ� SpringBoot���������߿�������һ��Web������ SpringBoot�̳���ԭ��Spring���ܵ����������� SpringBoot������ʹ��Spring�Ĺ��̣� Spring BootΪ���Ǵ����˽ű����Կ�����Ч�ʣ�����Spring Boot��û���������������¼���������Java EE�����߳����Ķ���� SpringBoot���������� Spring Bootʹ���������� Spring Bootʹ���ñ����� Spring Bootʹ���������� Spring Bootʹ���ر����� SpringBoot�ĺ��Ĺ��� ��һ���������е�Spring��Ŀ Spring Boot������jar������ʽ���ж��������У�ʹ�ã�java -jar xx.jar �Ϳ��Գɹ���������Ŀ��������Ӧ����Ŀ��������������main�������ɣ�ʹ����Ŀ�Ĳ��𣬵��Զ����ü򵥡� ��������Ƕ��Servlet���� ��Ƕ������ʹ�����ǿ���ִ��������Ŀ��������main������ʹ��Ŀ�Ŀ������У� ����������SpringbootDemoApplication.java import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class SpringbootDemoApplication { public static void main(String[] args) { SpringApplication.run(SpringbootDemoApplication.class, args); } } �������ṩstarter����Manen���� Spring Boot�ṩ��һϵ�е�starter pom�����������ǵ�Maven����,�±��Ǵ���һ������web demo������pom���� &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.2.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; Spring Boot�������ṩ�˺ܶ���starter pom�����ο��� http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-documentation ���߷���https://github.com/spring-projects/spring-boot/tree/master/spring-boot-starters ͨ�������Ķ�������֪��springboot����Ϊ���������������Ŀ��ܽ�������starter pom���ϣ�������ʹ�õ�ʱ��ֻҪ�������ص�starter��Ȼ���Ϳ���ֱ��ʹ�ã����ߺ��ٵ����ã��Ϳ���ʹ�øÿ��ܵĹ���Ϊ���Ƿ����� ���ģ��Զ�����SpringSpring Boot������������Ŀ����·����jar��/�࣬Ϊjar�����������Զ�����Bean������һ���ʹ����ļ��������ǵ����á���Ȼ����ֻ��Spring���ǵ��Ĵ�������ʹ�ó�������һЩ�������������ǻ���Ҫ�Զ����Զ����ã� ���壩�޴������ɺ�XML����Spring Boot�����ĵط����ǽ����ڴ���������ʵ�ֵģ�����ͨ������ע���ķ�ʽ��ʵ�ֵģ���Ҳ��Spring 4.x�������ԡ� Spring Boot�Ŀ��ٴ���� ���ǿ���ͨ������http://start.spring.io/�����ٹ���һ��springbootӦ�ã�ѡ��������Ҫ��ģ���󣬻س����ߵ���Generate Project�ͻ�����һ��ѹ��������ѹ������ѹ���������ǵ�ide�Ϳ�������һ��demo��Ŀ������Ҳ����ͨ��idea��SPRING INITIALIZR����������һ��SpringBoot��Ŀ�� SpringBoot�������̳�̽ �Ķ����ǵ�demo���룬���Ƿ�����main����������ִ����һ�������Ĵ���SpringApplication.run(DemoApplication.class, args);�鿴run��������������run�����ķ���˵��Ϊ�� /** * Static helper that can be used to run a {@link SpringApplication} from the * specified source using default settings. * @param source the source to load * @param args the application arguments (usually passed from a Java main method) * @return the running {@link ApplicationContext} */ public static ConfigurableApplicationContext run(Object source, String... args) { return run(new Object[] { source }, args); } ������˵���ʹ������ǿ��Կ������þ�̬�����������������ǵ�Ӧ�ã�����������ʹ��Ĭ�����ã��������������ֱ������ǵ�main�������ڵ��࣬��main�����ķ���������Ȼ�������˵�ǰ���µ�����run����������run�������£� public static ConfigurableApplicationContext run(Object[] sources, String[] args) { return new SpringApplication(sources).run(args); } �����η������ǿ������÷���ʵ������һ��SpringApplication,c�����Ĳ�����ȻΪӦ�����������࣬���ҵ�����SpringApplication�µ�run��String…args)�������������ǲ鿴ʵ�����ķ�����Ҳ����SpringApplication�Ĺ��캯���� public SpringApplication(Object... sources) { initialize(sources); } �鿴initialize������ @SuppressWarnings({ &quot;unchecked&quot;, &quot;rawtypes&quot; }) private void initialize(Object[] sources) { if (sources != null &amp;&amp; sources.length &gt; 0) { this.sources.addAll(Arrays.asList(sources)); } this.webEnvironment = deduceWebEnvironment(); setInitializers((Collection) getSpringFactoriesInstances( ApplicationContextInitializer.class)); setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); this.mainApplicationClass = deduceMainApplicationClass(); } �����Ĵ������Կ�����ʼ�������������¼�������this.webEnvironment = deduceWebEnvironment();��һ������������������һ��WEBӦ�û���һ��SPRING�ı�׼StandaloneӦ�á����������Կ���������ô�жϵģ� private boolean deduceWebEnvironment() { for (String className : WEB_ENVIRONMENT_CLASSES) { if (!ClassUtils.isPresent(className, null)) { return false; } } return true; } ���Կ����Ǹ���org.springframework.util.ClassUtils�ľ�̬����ȥ�ж�classpath�����Ƿ���WEB_ENVIRONMENT_CLASSES�������࣬�����ж������򷵻�true����ʾ����һ��WEBӦ�ã����򷵻�false����һ����׼Spring��Ӧ�á�Ȼ��ͨ�����룺 private static final String[] WEB_ENVIRONMENT_CLASSES = { &quot;javax.servlet.Servlet&quot;, &quot;org.springframework.web.context.ConfigurableWebApplicationContext&quot; }; ���Կ����Ƿ�����һ��WEBӦ�þ���ȡ����classpath���Ƿ���javax.servlet.Servlet��org.springframework.web.context.ConfigurableWebApplicationContext��Ȼ��������һ���׶Σ� setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class)); ���������ǳ�ʼ��classpath�µ����еĿ��õ�ApplicationContextInitializer setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class)); ���������ǳ�ʹ��classpath�µ����еĿ��õ�ApplicationListener��������ִ��deduceMainApplicationClass�������ҳ�main������ȫ������������ʵ�������õ�SpringApplication��this.mainApplicationClass���ɳ�ʼ���� private Class&lt;?&gt; deduceMainApplicationClass() { try { StackTraceElement[] stackTrace = new RuntimeException().getStackTrace(); for (StackTraceElement stackTraceElement : stackTrace) { if (&quot;main&quot;.equals(stackTraceElement.getMethodName())) { return Class.forName(stackTraceElement.getClassName()); } } } catch (ClassNotFoundException ex) { // Swallow and continue } return null; } Ȼ������SpringApplicationʵ����run����������Ӧ�ã��������£� /** * Run the Spring application, creating and refreshing a new * {@link ApplicationContext}. * @param args the application arguments (usually passed from a Java main method) * @return a running {@link ApplicationContext} */ public ConfigurableApplicationContext run(String... args) { StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; FailureAnalyzers analyzers = null; configureHeadlessProperty(); SpringApplicationRunListeners listeners = getRunListeners(args); listeners.starting(); try { ApplicationArguments applicationArguments = new DefaultApplicationArguments( args); ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); Banner printedBanner = printBanner(environment); context = createApplicationContext(); analyzers = new FailureAnalyzers(context); prepareContext(context, environment, listeners, applicationArguments, printedBanner); refreshContext(context); afterRefresh(context, applicationArguments); listeners.finished(context, null); stopWatch.stop(); if (this.logStartupInfo) { new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch); } return context; } catch (Throwable ex) { handleRunFailure(context, listeners, analyzers, ex); throw new IllegalStateException(ex); } } ���ǿ��Կ��������δ�����Ϊ����Ӧ�������ľ���ʵ�֣����ǱȽϸ��ӵģ�Ŀǰ��֪����������SpringApplicationRunListener�����������ĳ�ʼ�����̽��м����� SpringApplicationRunListeners listeners = getRunListeners(args); listeners.starting(); Ȼ�����ǲ鿴���漸�д��룺 ApplicationArguments applicationArguments = new DefaultApplicationArguments(args); ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); Banner printedBanner = printBanner(environment); context = createApplicationContext(); prepareContext(context, environment, listeners, applicationArguments, printedBanner); refreshContext(context); afterRefresh(context, applicationArguments); �����ǻ�ȡ����ʱ��������args����ʼ��ΪApplicationArguments����SpringApplication.run(Application.class, args);ȡ���ﴫ��ֵ��Ȼ������SpringBootӦ�õĻ����� ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); Ȼ�������������ǱȽϺ��ĵģ� context = createApplicationContext(); prepareContext(context, environment, listeners, applicationArguments, printedBanner); refreshContext(context); afterRefresh(context, applicationArguments); ������createApplicationContext()������ protected ConfigurableApplicationContext createApplicationContext() { Class&lt;?&gt; contextClass = this.applicationContextClass; if (contextClass == null) { try { contextClass = Class.forName(this.webEnvironment ? DEFAULT_WEB_CONTEXT_CLASS : DEFAULT_CONTEXT_CLASS); } catch (ClassNotFoundException ex) { throw new IllegalStateException( &quot;Unable create a default ApplicationContext, &quot; + &quot;please specify an ApplicationContextClass&quot;, ex); } } return (ConfigurableApplicationContext) BeanUtils.instantiate(contextClass); } ���Կ���������ǰ��ʼ�����̳�ʼ����this.webEnvironment��������ʼ��һ��ʲô����������classpath���Ƿ���javax.servlet.Servlet��org.springframework.web.context.ConfigurableWebApplicationContext�࣬��ʹ��DEFAULT_WEB_CONTEXT_CLASS��ʼ����������������������DEFAULT_CONTEXT_CLASS��ʼ�����������������Ĵ���������Ȼ��ִ�����µļ��������������������Ĵ����������Լ�bean��ע�빦�ܡ� prepareContext(context, environment, listeners, applicationArguments, printedBanner); ������һ��������ʵ��spring-boot-starter-*���Զ������õĹؼ��� refreshContext(context); afterRefresh(context, applicationArguments); ����refreshContext������ApplicationContext��������������prepareBeanFactory������postProcessBeanFactory������������ע�ᣬ��Ϣ����ʼ���ȵȲ������������Բ鿴AbstractApplicationContext���µ�refresh()������afterRefresh����ʵ����ʹ�õ���callRunners(context, args);�������������£� private void callRunners(ApplicationContext context, ApplicationArguments args) { List&lt;Object&gt; runners = new ArrayList&lt;Object&gt;(); runners.addAll(context.getBeansOfType(ApplicationRunner.class).values()); runners.addAll(context.getBeansOfType(CommandLineRunner.class).values()); AnnotationAwareOrderComparator.sort(runners); for (Object runner : new LinkedHashSet&lt;Object&gt;(runners)) { if (runner instanceof ApplicationRunner) { callRunner((ApplicationRunner) runner, args); } if (runner instanceof CommandLineRunner) { callRunner((CommandLineRunner) runner, args); } } } ���Կ����������������е�bean����һ��ListȻ��ѭ��ע�ᣬ����ֵ��ע����callRunner����������ApplicationRunner�ӿڵ�run����������ִ��bean�� ������Ϊֹ�������������������̻������ɣ����еĸ���Listener������Environment��Environment�ĳ�ʼ�������ݶ�û�������������Ľ�������ʱ��������Ȥ���Լ����鿴Դ���� SpringBoot�Զ����ý��� �����ȿ�@SpringBootApplicationע�⣺ @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration @ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) }) ��������@Target��@Retention��@Documented��@Inherited���ĸ�ע��ΪԪע��������@ComponentScan������Spring�ܳ��õ�ע�⣬Ҳ�����������ȿ�@SpringBootConfiguration�� @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Configuration public @interface SpringBootConfiguration { } ����ע��������@Configuration��ע��ǰ��Ϊ��JavaConfig�� ��Ȼ����������@EnableAutoConfigurationע�� @SuppressWarnings(&quot;deprecation&quot;) @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @AutoConfigurationPackage @Import(EnableAutoConfigurationImportSelector.class) ����ע����@Import(EnableAutoConfigurationImportSelector.class)��������������Spring��JavaConfig���Ž���EnableAutoConfigurationImportSelector.class���Ƿ��ָ����̳���AutoConfigurationImportSelector��Ȼ�����ǲ鿴�������ķ����� @Override public String[] selectImports(AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return NO_IMPORTS; } try { AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader .loadMetadata(this.beanClassLoader); AnnotationAttributes attributes = getAttributes(annotationMetadata); List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes); configurations = removeDuplicates(configurations); configurations = sort(configurations, autoConfigurationMetadata); Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes); checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = filter(configurations, autoConfigurationMetadata); fireAutoConfigurationImportEvents(configurations, exclusions); return configurations.toArray(new String[configurations.size()]); } catch (IOException ex) { throw new IllegalStateException(ex); } } ���룺List configurations = getCandidateConfigurations(metadata,attributes); protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) { List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames( getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot; + &quot;are using a custom packaging, make sure that file is correct.&quot;); return configurations; } �ڽ��룺List configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); ��������: public static List&lt;String&gt; loadFactoryNames(Class&lt;?&gt; factoryClass, ClassLoader classLoader) { String factoryClassName = factoryClass.getName(); try { Enumeration&lt;URL&gt; urls = (classLoader != null ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION)); List&lt;String&gt; result = new ArrayList&lt;String&gt;(); while (urls.hasMoreElements()) { URL url = urls.nextElement(); Properties properties = PropertiesLoaderUtils.loadProperties(new UrlResource(url)); String factoryClassNames = properties.getProperty(factoryClassName); result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames))); } return result; } catch (IOException ex) { throw new IllegalArgumentException(&quot;Unable to load [&quot; + factoryClass.getName() + &quot;] factories from location [&quot; + FACTORIES_RESOURCE_LOCATION + &quot;]&quot;, ex); } } �������Ĵ������Կ����Զ��������������ݴ�����factoryClass.getName()��spring.factories���ļ����ҵ���Ӧ��key���Ӷ������������࣬������ô���صĲο� SpringBoot�������̳�̽��������refreshContext(context);ʵ�֡����ǿ���ͨ���鿴spring-boot-autoconfigure-1.5.2.RELEASE.jar�µ�META-INF����spring.factories�鿴SpringBoot��֧�ֵ��Զ����õ���/���������ܡ�������org.springframework.boot.autoconfigure.data.Redis.RedisAutoConfigurationΪ���鿴�������£� @Configuration @ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class }) @EnableConfigurationProperties(RedisProperties.class) public class RedisAutoConfiguration { @Configuration @ConditionalOnClass(GenericObjectPool.class) protected static class RedisConnectionConfiguration { @Bean @ConditionalOnMissingBean(RedisConnectionFactory.class) public JedisConnectionFactory redisConnectionFactory() throws UnknownHostException { return applyProperties(createJedisConnectionFactory()); } } @Configuration protected static class RedisConfiguration { @Bean @ConditionalOnMissingBean(name = &quot;redisTemplate&quot;) public RedisTemplate&lt;Object, Object&gt; redisTemplate( RedisConnectionFactory redisConnectionFactory) throws UnknownHostException { RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;Object, Object&gt;(); template.setConnectionFactory(redisConnectionFactory); return template; } @Bean @ConditionalOnMissingBean(StringRedisTemplate.class) public StringRedisTemplate stringRedisTemplate( RedisConnectionFactory redisConnectionFactory) throws UnknownHostException { StringRedisTemplate template = new StringRedisTemplate(); template.setConnectionFactory(redisConnectionFactory); return template; } } �� ��������һ�»����ϾͿ��Կ���������һ��Spring��ע����������@ConditionalOnClass({ JedisConnection.class, RedisOperations.class, Jedis.class })����ע������˼�ǣ�������JedisConnection.class, RedisOperations.class, Jedis.class������ʱ�Ž���RedisAutoConfiguration������,���򲻽�����һ��������@ConditionalOnMissingBean(name = ��redisTemplate��)����ע������˼�����������в�����nameָ����bean�򴴽�beanע�룬������ִ���ڲ��������Կ��������ֶ�����������@Configurationע���������࣬����������������SpringIOC����ע������3��bean�����ȵ���·���´���(GenericObjectPool.class)ʱ��ע��JedisConnectionFactory ��ʵ������Spring�����в�����name = ��redisTemplate����ʵ�壬�򴴽�RedisTemplate��StringRedisTemplateʵ��ע��������������Spring����Ŀ�У��Ϳ�������������Spring������bean��ע����RedisTemplate��StringRedisTemplate��ʵ������redis���������ˡ�ͨ�����Ϸ����Ĺ������ǿ��Է���ֻҪһ������SpringBoot��Ŀ����·���´���JedisConnection.class, RedisOperations.class, Jedis.class�Ϳ��Դ����Զ�������,��˼˵����ֻҪ��maven����Ŀ��������spring-data-redis-1.7.2.RELEASE.jar��C:jedis-2.8.2.jar�Ϳ��Դ����Զ�����,����������ÿ����һ�����ܶ�Ҫȥ���������Զ��������࣬�Ǿʹ��������伴�õ�Ч���ˡ�����Spring-bootΪ���ṩ��ͳһ��starter����ֱ�����ú����ش����Զ����õ����е�������������redis��start���£� &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; Ȼ�����ǵ���artifactId���Է��֣�spring-boot-starter-data-redis��Դ����pom.xml�ļ�����������: &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.data&lt;/groupId&gt; &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;redis.clients&lt;/groupId&gt; &lt;artifactId&gt;jedis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; ��Ϊmaven�����Ĵ����ԣ�����ֻҪ����starter�Ϳ��Կ�����·�������ú����еĴ����Զ����õ������࣬ʵ�ֿ��伴�õĹ��ܡ�ͨ��������springboot�Զ�����ԭ�������⣬�������������Լ������Լ�ר�е�starterҲ���Ǻ����ѵģ�ֻ��Ҫ��չһ��spring.factories��Ȼ��������һ���Լ�ӵ�е�config������������Ҫ�����Ĺ����Ϳ����ˡ�","tags":[]},{"title":"","date":"2017-04-02T00:46:45.594Z","path":"2017/04/02/SpringBatch 学习分享文档（转载）/","text":"SpringBatch ѧϰ�����ĵ���ת�أ� SpringBatch ���� Spring Batch��һ���������ģ���ȫ����Spring�����������ܣ�����Ӧ������ҵ�����������ݴ���ϵͳ��Spring Batch��POJO�ʹ�����֪��Spring����Ϊ������ʹ�����߸����׵ķ��ʺ�������ҵ��������Spring Batch�����ṩ�����ģ����ظ������ݴ������ܣ�������־��¼/���٣�������������ҵ����ͳ�ƹ�����������������������Դ��������Ҫ���ܡ� SpringBatch������Ҫ�� ����Spring����ģ�ͣ�ʹ����Աרע��ҵ����������Spring���ܹ������̡� ��ȷ������������ִ�л�����Ӧ�á� �ṩ���ĵģ���ͨ�Ľӿڡ� �ṩ���伴�ã�out of the box���ļ򵥵�Ĭ�ϵĺ���ִ�нӿڡ� �ṩSpring���������á��Զ��塢����չ������ ���д��ڵĺ��ķ������Ժ��ݵı��滻����չ����Ӱ�������㡣 �ṩһ���򵥵Ĳ���ģʽ������Maven����������Jar�ļ��� SpringBatch��Ҫ���� JobRepository : ����ע��Job������ JobLauncher : ��������Job�Ľӿ� Job : ʵ��ִ�е����񣬰���һ��������Step Step : Step ���裬����ItemReader��ItemProcessor��ItemWriter ItemReader : ������ȡ���ݵĽӿ� ItemProcessor : �����������ݵĽӿ� ItemWriter : �����������ݵĽӿ� Spring Batch �Ľṹ��Ҫ��Ϊ���㣺Ӧ�ò㣨Application�������Ĳ㣨Batch Core���ͻ����ܹ��㣨Batch Infratrcture�������У�Ӧ�ò��������е���������ҵ��ͨ��Spring���ܹ�������Ա�Զ����Ĵ��롣���Ĳ�������Batch�����Ϳ�������Ҫ�ĺ����࣬�磺JobLauncher��Job��step�ȡ�Ӧ�ò��ͺ��Ĳ㽨���ڻ������ܲ�֮�ϣ��������ܲ��ṩ��ͨ�Ķ���ItemReader����д��ItemWriter�����ͷ�������ItemProcessor�����ݴ����ӿڡ����Ա�Ӧ�ò��ͺ��Ĳ�ʹ�ã��� SpringBatch������ ���������ĵ���ѧϰ�������Ѿ��ܹ�ͨ��springbatch����һ���򵥵�demo��д��demo������ַ��https://github.com/790712946/acer���鿴demo�����Ǵ�jobִ�п�ʼ�Ķ����������£� @Autowired private JobLauncher jobLauncher; @Autowired private Job importUserJob; //ÿ������ִ��һ�� @Scheduled(fixedRate=5000) public void executeJob() throws JobParametersInvalidException, JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException { //��ʱ������ʶ���� JobParameters jobParameter=new JobParametersBuilder().addLong(&quot;time&quot;,System.currentTimeMillis()).toJobParameters(); JobExecution jobExecution=jobLauncher.run(importUserJob,jobParameter); } ����@ScheduledΪ��ʱ���Ȳ��֣�������springbatch�����ݣ��Թ����ᣬ���ǿ��Է���springbatch������job����ͨ��JobLauncher��run�������������鿴run������ʵ�֣����ڴ�������̫�������Ƿֶν����Ķ������� Assert.notNull(job, &quot;The Job must not be null.&quot;); Assert.notNull(jobParameters, &quot;The JobParameters must not be null.&quot;); �����ö��Զ����ǵ����������������жϣ�����Ϊ�գ����򷵻ز���Ϊ�յ��쳣��Ϣ�����ţ� final JobExecution jobExecution; JobExecution lastExecution = jobRepository.getLastJobExecution(job.getName(), jobParameters); if (lastExecution != null) { if (!job.isRestartable()) { throw new JobRestartException(&quot;JobInstance already exists and is not restartable&quot;); } ͨ��jobRepository.getLastJobExecution������һ��jobִ�������������������������������������������Ǽ����鿴getLastJobExecution���������ݣ� @Override public JobExecution getLastJobExecution(String jobName, JobParameters jobParameters) { JobInstance jobInstance = jobInstanceDao.getJobInstance(jobName, jobParameters); if (jobInstance == null) { return null; } JobExecution jobExecution = jobExecutionDao.getLastJobExecution(jobInstance); if (jobExecution != null) { jobExecution.setExecutionContext(ecDao.getExecutionContext(jobExecution)); stepExecutionDao.addStepExecutions(jobExecution); } return jobExecution; } �������ڣ�����ͨ��jobInstanceDao.getJobInstance(jobName, jobParameters);������һ��jobInstance��������Ҫע�⣬jobInstanceDao�����ֲ�ͬʵ�֣�һ����JdbcJobInstanceDaoͨ�����ݿ���ѯʵ�֣�һ����MapJobInstanceDaoͨ���ڴ滺��ʵ�֣����Ŷ�jobinstance�������жϣ�����Ϊ�վͷ��أ���������ִ�У�ͨ��getLastJobExecution��ȡһ��JobExecution�������ڴ��������ݿ���û�У��򴴽�һ�����������ж���һ�������Ƿ������ظ�ִ��job.isRestartable()���������������׳�һ���쳣��JobRestartException���������ж�������ִ��״̬�� for (StepExecution execution : lastExecution.getStepExecutions()) { if (execution.getStatus() == BatchStatus.UNKNOWN) { //throw throw new JobRestartException(&quot;Step [&quot; + execution.getStepName() + &quot;] is of status UNKNOWN&quot;); }//end if } ֻҪ����״̬��ΪUNKNOWN�������������Ŷ����ǵ�jobParameters��������֤�� job.getJobParametersValidator().validate(jobParameters); ʹ����Ĭ�ϵ���֤��������Ҳ�����Լ���չ������֤������������ jobExecution = jobRepository.createJobExecution(job.getName(), jobParameters); ����ͨ������JobRepository������һ������ִ��������������ʹ���̳߳�TaskExecutor.executeִ�����ǵ���������Ҫ��ע job.execute(jobExecution);�������鿴�÷����� JobSynchronizationManager.register(execution); �����ǵ����л�����������ע��������ִ��������Ϊ���ǵ������Ƕ��߳�ִ�еģ����������������л������̵߳���Ϣ�����ţ� jobParametersValidator.validate(execution.getJobParameters()); ��֤������Ч�ԣ�ͨ��if (execution.getStatus() != BatchStatus.STOPPING) �ж�ִ��״̬����������û��ֹͣ������ִ�� execution.setStartTime(new Date()); updateStatus(execution, BatchStatus.STARTED); listener.beforeJob(execution); ���������˿�ʼʱ��Ϊ��ǰʱ�䣬ִ��״̬Ϊ��ʼ�ˣ�Ȼ��ִ�������Ǽ������е�beforeJob����������ִ��doExecute����������ִ�еľ������ǵľ���JOB�ˡ����Ǹ������ӿڣ������ֲ�ͬ��ʵ�֣��ֱ���FlowJob��JsrFlowJob��JSR��׼ʵ�֣�,SimpleJobʵ�֣���������ֻ����SimpleJob��ʵ�֣��������£� protected void doExecute(JobExecution execution) throws JobInterruptedException, JobRestartException, StartLimitExceededException { StepExecution stepExecution = null; for (Step step : steps) { stepExecution = handleStep(step, execution); if (stepExecution.getStatus() != BatchStatus.COMPLETED) { // // Terminate the job if a step fails // break; } } ���ǿ��Կ����������Ǳ���������Step��Ȼ��ͨ��handleStep��ִ�в��裬�����鿴handleStep���룬�����߼�Ϊ�� step.execute(currentStepExecution); currentStepExecution.getExecutionContext().put(&quot;batch.executed&quot;, true); ���Կ��������ǵĲ�����ͨ��step.execute��currentStepExecution��ִ�У��鿴ִ�д��룬ǰ����Ҫ������һЩ��ʼʱ�䣬ִ��״̬�����ú��жϣ�����ֻ��ע�����߼����������£� doExecutionRegistration(stepExecution); ע��ִ������ getCompositeListener().beforeStep(stepExecution); open(stepExecution.getExecutionContext()); ����������������ִ��beforeStep���֡� doExecute(stepExecution); ִ��ִ����������һ���ӿڣ��кܶ���ʵ�֣������߼���Jobִ������ִ�з������ƣ�Ҳ��ͨ��taskExecutor.execute���ж��߳�ִ�У���������Job��execute�ӿڡ����Ż�����ִ��״̬ΪCOMPLETED����finally�����Բ���ִ�������и��£� exitStatus = exitStatus.and(stepExecution.getExitStatus()); stepExecution.setExitStatus(exitStatus); exitStatus = exitStatus.and(getCompositeListener().afterStep(stepExecution)); ע�⣬������ִ�����Ǽ��������Ĳ���ִ�������¼�����Job��Ҳ��һ���ģ������ظ�˵���� ������ҵ���߼���ʹ�ý̳̿���ͨ��ʾ��demo�鿴�����ﲻ��˵���� �ܽ� �������������springbatch��ִ�����̶��Ѿ������ˣ���Ȼ����״̬��תû����ô���ĵ���˵�������ǻ����������ǵĺ����߼�ǰ�����Թ۲쵽��Ŀǰֻ�Ǽ����˽⣬�Ӵ�ʱ�䲻�࣬�������룬���������Ѿ�������springbatch�����ܶ����������ƺ�ʹ�÷����������̳߳ص����õȡ�ͨ��ѧϰspringbatch�˽⵽�ˣ���������һ���ǳ����ӵ����̣����л��кܶ಻�Ǻ����׵ĵط���ϲ���ڽ�����ʱ�����������ƣ��˽⡣","tags":[]},{"title":"HEXO+Github,搭建属于自己的博客（转载）","date":"2016-12-17T13:45:12.000Z","path":"2016/12/17/HEXO-Github-搭建属于自己的博客（转载）/","text":"原文地址：http://www.jianshu.com/p/465830080ea9 经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。 本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1499065178 ，或者给我发邮件：leopardpan@icloud.com ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客HEXO进阶，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看Jekyll搭建个人博客 正文： 这边教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 配置环境安装Node（必须）作用：用来生成静态页面的到Node.js官网下载相应平台的最新版本，一路安装即可。 安装Git（必须）作用：把本地的hexo内容提交到github上去.安装Xcode就自带有Git，我就不多说了。 申请GitHub（必须）作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HEXO Node和Git都安装好后，可执行如下命令安装hexo： $ sudo npm install -g hexo 初始化创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令： hexo init 好啦，至此，全部安装工作已经完成！ 生成静态页面继续再Blog目录下执行如下命令，生成静态页面 hexo generate （hexo g 也可以） 本地启动启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000我不知道你们能不能，反正我不能，因为我还有环境没配置好 常见的HEXO配置错误：12345ERROR Plugin load failed: hexo-server原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.解决方法，执行命令：$ sudo npm install hexo-server 12345678910执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....原因：我认为是没有生成本地服务解决方法，执行命令：$ npm install hexo-server --save提示：hexo-server@0.1.2 node_modules/hexo-server.... 表示成功了[参考](https://hexo.io/zh-cn/docs/server.html) 这个时候再执行：$ hexo-server 得到: INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 这个时候再点击http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的是：白板和Cannot GET / 几个字原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save 这个时候再重新生成静态文件，命令： hexo generate （或hexo g） 启动本地服务器： hexo server （或hexo s） 再点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有： Blog ｜ ｜－－ _config.yml ｜－－ node_modules ｜－－ public ｜－－ source ｜－－ db.json ｜－－ package.json ｜－－ scaffolds ｜－－ themes 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml 翻到最下面，改成我这样子的，注意： : 后面要有空格 deploy: type: git repository: https://github.com/leopardpan/leopardpan.github.io.git branch: master 执行如下命令才能使用git部署 npm install hexo-deployer-git --save 网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。然后，执行配置命令： hexo deploy 然后再浏览器中输入http://leopardpan.github.io/就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了 部署步骤每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 一些常用命令： hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help #查看帮助 hexo version #查看Hexo的版本 这里有大量的主题列表使用方法里面都有详细的介绍，我就不多说了。我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，? Cover - A chic theme with facebook-like cover photo Oishi - A white theme based on Landscape plus and Writing. Sidebar - Another theme based on Light with a simple sidebar TKL - A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp - A clean, simple theme based on Tinny Writing - A small and simple hexo theme based on Light Yilia - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy - A theme with dynamic tagcloud and dynamic snow 一些基本路径 文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 Markdown语法参考链接: 作业部落 Q&amp;A 问：如何让文章想只显示一部分和一个 阅读全文 的按钮？答：在文章中加一个 &lt;!--more--&gt; ， &lt;!--more--&gt; 后面的内容就不会显示出来了。 问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，出现 404 .答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。","tags":[]},{"title":"Hello World","date":"2016-12-17T13:28:59.996Z","path":"2016/12/17/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]